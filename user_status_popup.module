<?php

/**
 * @file
 * Add custom comment here.
 */

use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function user_status_popup_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the user_status_popup module.
    case 'help.page.user_status_popup':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module show user form status as button and fire popup confirm form') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_status_popup_form_user_form_alter(&$form, $form_state) {
  if ($form['#form_id'] != 'user_register_form') {
    // Get user entity.
    $form_object = $form_state->getFormObject();
    $user_entity = $form_object->getEntity();

    // Check if current user have administered user permission.
    $user = \Drupal::currentUser();
    $current_user_access = $user->hasPermission('administer users');

    if ($current_user_access) {
      // Create a custom status field.
      // Hide core user status field.
      $user_role = '';
      if (!empty($form['account']['status']['#suffix'])) {
        $user_role = $form['account']['status']['#suffix'];
      }
      $form['account']['status']['#access'] = FALSE;

      // Check if user blocked or not.
      if ($user_entity->isBlocked()) {
        $form['account']['user_status_popup']['active'] = [
          '#type'   => 'link',
          '#title'  => t('Activate'),
          '#url' => Url::fromRoute('nwc_user_status.user_active', ['user' => $user_entity->id()]),
          '#prefix' => '<div class="block-action"><div class="label">' . t('Status:') . ' <b>' . t('Blocked') . '</b></div></div>',
          '#suffix' => $user_role,
          '#attributes' => [
            'id' => ['active-user-action'],
            'class' => ['button button--primary use-ajax'],
            'data-dialog-type' => 'modal',
            'data-dialog-options' => '{"width":600,"draggable":false,"autoResize":true}',
          ],
        ];
      }
      else {
        $form['account']['user_status_popup']['block'] = [
          '#type'   => 'link',
          '#title'  => t('Block'),
          '#url' => Url::fromRoute('nwc_user_status.user_block', ['user' => $user_entity->id()]),
          '#prefix' => '<div class="block-action"><div class="label">' . t('Status:') . ' <b>' . t('Activated') . '</b></div></div>',
          '#suffix' => $user_role,
          '#attributes' => [
            'id' => ['block-user-action'],
            'class' => ['button button--danger use-ajax'],
            'data-dialog-type' => 'modal',
            'data-dialog-options' => '{"width":600,"draggable":false,"autoResize":true}',
          ],
        ];
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function user_status_popup_theme($existing, $type, $theme, $path) {
  return [
    'user_status_action' => [
      'template' => 'user-status-action',
      'variables' => [
        'status' => NULL,
        'approve_url' => '#',
        'reject_url' => '#',
      ],
    ],
  ];
}

/**
 * Implements hook_views_data().
 */
function user_status_popup_views_data() {
  $data['views']['table']['group'] = t('User');
  $data['views']['table']['join'] = [
    // #global is a special flag which allows a table to appear all the time.
    '#global' => [],
  ];
  $data['views']['user_status_action_views_field'] = [
    'title' => t('User Status Action'),
    'help' => t('This field for add custom buttons for change user status.'),
    'field' => [
      'id' => 'user_status_action_views_field',
    ],
  ];
  return $data;
}
